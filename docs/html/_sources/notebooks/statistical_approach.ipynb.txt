{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j_Q6VK26-3j0"
      },
      "source": [
        "# <span style=\"color:#3498db\">**A mini-tutorial...**</span>\n",
        "\n",
        "Specifically, to assess the statistical significance of spectral estimates obtained from electrophysiological data (in this case LFP) we used non-parametric permutation tests and focused on the multiple comparison correction of time frequency representations (TFRs). We show that the success of the two approaches depends on the dimensions of the data at hand, be these spatial locations, time and frequency analysis parameters, trials of different conditions, the nature of hypothesis, etc. For basic pedagogical purposes, here I focus on spectral power increases relative to baseline using two variants of essentially the same approach: 1) null hypothesis testing using the min-max distribution approach, which captures variations at the extremes of the null distribution, and 2) null hypothesis testing using the whole null distribution, obtained by averaging across specific dimensions.\n",
        "\n",
        "Since there are several ways to achieve these goals and many realizations of these and other related methods (i.e. thresholds may be obtained from the percentiles of the null distribution directly and further corrected in equivalent ways, or the pooling of data accomplished among specific dimensions), here I focus on these two common methods using very simple examples in the hope to help those researchers (including myself) that are or may be in need of clarity on these matters, touch ground. Depending on the approach, the computation of the p-values will change slightly. In the min-max approach the minimum and maximum values at each permutations are used. When testing using the whole null distribution, the null values obtained from the permutations are averaged the same way the empirical distribution is averaged so the dimensions of the empirical distributions are preserved in the null distribution. Once the null distributions have been obtained, p-values are obtained using the empirical cumulative distribution. Provided the right Python environment, this Jupyter notebook should work as a simple mini-tutorial and support the discussion of these and related basic approaches for computing TFRs and assessing their statistical significance in a clear way. The methods presented here are a work in progress. I plan to make some refinements in the next few weeks. Should you be interested in  employing these methods or if you have any questions, please feel free to reach out to me. I would be more than happy to assist you further."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Installation\n",
        "\n",
        "\n",
        "To run the [notebook](https://github.com/nicogravel/tfrStats/blob/main/docs/html/notebooks/statistical_approach.ipynb), clone the package (or your fork) locally and then:\n",
        "  \n",
        "    \n",
        "```\n",
        "git clone https://github.com/nicogravel/tfrStats.git\n",
        "\n",
        "cd tfrStats\n",
        "\n",
        "conda env create --name tfrStats-dev --file tfrStats.yml\n",
        "\n",
        "conda activate tfrStats-dev\n",
        "\n",
        "pip install -e .\n",
        "```\n",
        "  \n",
        "    \n",
        "    \n",
        "\n",
        "VoilÃ !"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cuKdKsiT-xLD"
      },
      "source": [
        "## Import libraries and define functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "oYM2uHdeg2RH"
      },
      "outputs": [
        {
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32m/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/statistical_approach.ipynb Cell 4\u001b[0m line \u001b[0;36m1\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/statistical_approach.ipynb#W3sZmlsZQ%3D%3D?line=0'>1</a>\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39mtfrStats\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mplot_tfr_stats\u001b[39;00m \u001b[39mimport\u001b[39;00m plot_tfr_stats \u001b[39mas\u001b[39;00m plot_tfr_stats\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/statistical_approach.ipynb#W3sZmlsZQ%3D%3D?line=1'>2</a>\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39mtfrStats\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mplot_dtfr_stats\u001b[39;00m \u001b[39mimport\u001b[39;00m plot_dtfr_stats \u001b[39mas\u001b[39;00m plot_dtfr_stats\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/statistical_approach.ipynb#W3sZmlsZQ%3D%3D?line=3'>4</a>\u001b[0m \u001b[39m#in_path   = '/Volumes/.../data/'\u001b[39;00m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/statistical_approach.ipynb#W3sZmlsZQ%3D%3D?line=4'>5</a>\u001b[0m \u001b[39m#out_path  = '/Volumes/.../results/stats/univariate/'\u001b[39;00m\n",
            "File \u001b[0;32m~/Documents/Websites/tfrStats/tfrStats_local/tfrStats/plot_tfr_stats.py:1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mnumpy\u001b[39;00m \u001b[39mas\u001b[39;00m \u001b[39mnp\u001b[39;00m\n\u001b[1;32m      2\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mmatplotlib\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mpyplot\u001b[39;00m \u001b[39mas\u001b[39;00m \u001b[39mplt\u001b[39;00m\n\u001b[1;32m      3\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39mscipy\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39minterpolate\u001b[39;00m \u001b[39mimport\u001b[39;00m interp2d\n",
            "File \u001b[0;32m~/opt/anaconda3/envs/lamidec/lib/python3.8/site-packages/numpy/__init__.py:337\u001b[0m\n\u001b[1;32m    334\u001b[0m \u001b[39mdel\u001b[39;00m PytestTester\n\u001b[1;32m    336\u001b[0m \u001b[39mimport\u001b[39;00m \u001b[39mmkl\u001b[39;00m\n\u001b[0;32m--> 337\u001b[0m __mkl_version__ \u001b[39m=\u001b[39m \u001b[39m\"\u001b[39m\u001b[39m{MajorVersion}\u001b[39;00m\u001b[39m.\u001b[39m\u001b[39m{MinorVersion}\u001b[39;00m\u001b[39m.\u001b[39m\u001b[39m{UpdateVersion}\u001b[39;00m\u001b[39m\"\u001b[39m\u001b[39m.\u001b[39mformat(\u001b[39m*\u001b[39m\u001b[39m*\u001b[39mmkl\u001b[39m.\u001b[39;49mget_version())\n\u001b[1;32m    340\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39m_sanity_check\u001b[39m():\n\u001b[1;32m    341\u001b[0m     \u001b[39m\"\"\"\u001b[39;00m\n\u001b[1;32m    342\u001b[0m \u001b[39m    Quick sanity checks for common bugs caused by environment.\u001b[39;00m\n\u001b[1;32m    343\u001b[0m \u001b[39m    There are some cases e.g. with wrong BLAS ABI that cause wrong\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    349\u001b[0m \n\u001b[1;32m    350\u001b[0m \u001b[39m    \"\"\"\u001b[39;00m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "from tfrStats.plot_tfr_stats import plot_tfr_stats as plot_tfr_stats\n",
        "from tfrStats.plot_dtfr_stats import plot_dtfr_stats as plot_dtfr_stats\n",
        "\n",
        "#in_path   = '/Volumes/.../data/'\n",
        "#out_path  = '/Volumes/.../results/stats/univariate/'\n",
        "in_path   = '/Volumes/Gandalg/MWlamprop/data/'\n",
        "out_path  = '/Volumes/Gandalf/MWlamprop/results/stats/univariate/'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Compute p-values\n",
        "\n",
        "Here we plot TFRs with the significance threshold computed from p-values (i.e. p-val <= 0.05) (top panel, blue trace). The alpha mask specifies the section containing the values above the null percentile cutoff (i.e. 95%). The p-values (bottom panel) with the null percentile cutoff  (red trace)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### min-max"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "type         = 'minmax'\n",
        "null         = [95, 0.05] # percentile, p-value\n",
        "fband        = 1; \n",
        "cond         = 0\n",
        "\n",
        "plot_tfr_stats(out_path, cond, fband, null, type)  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### whole-null"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "type         = 'whole'\n",
        "null         = [95, 0.05] # percentile, p-value\n",
        "fband        = 1; \n",
        "cond         = 0\n",
        "\n",
        "plot_tfr_stats(out_path, cond, fband, null, type) "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##  Spectral power as a function of depth and space\n",
        "\n",
        "For this other type of TFR one must consider the pooling of data over predefined frequency bins, as well as spatial dimentions (i.e.  ROIs). Therefore, the multiple correction will change slightly. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### min-max"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "type         = 'minmax'\n",
        "null         = [95, 0.05] # percentile, p-value\n",
        "fband        = 1; \n",
        "cond         = 0\n",
        "\n",
        "plot_dtfr_stats(out_path, cond, fband, null, type)  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "###  whole null"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": [
        "type         = 'whole'\n",
        "null         = [95, 0.05] # percentile, p-value\n",
        "fband        = 1; \n",
        "cond         = 0\n",
        "\n",
        "plot_dtfr_stats(out_path, cond, fband, null, type)  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "szKEE41WIZlD",
        "cuKdKsiT-xLD",
        "OWH7Fjfy_K5Q",
        "FFpTHYv8BYEw",
        "ZhUt1I13Bbfv",
        "dcOdfYWeBhYn",
        "-lRqU1vNBkEp"
      ],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
