{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cuKdKsiT-xLD"
      },
      "source": [
        "## Import libraries and define functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[0 1 2 3 4 5 6 7 8 9] [8 9 0 1 2 3 4 5 6 7]\n",
            "[0 1 2 3 4 5 6 7 8 9] [4 5 6 7 8 9 0 1 2 3]\n",
            "[0 1 2 3 4 5 6 7 8 9] [5 6 7 8 9 0 1 2 3 4]\n",
            "[0 1 2 3 4 5 6 7 8 9] [1 2 3 4 5 6 7 8 9 0]\n",
            "[0 1 2 3 4 5 6 7 8 9] [3 4 5 6 7 8 9 0 1 2]\n",
            "[0 1 2 3 4 5 6 7 8 9] [7 8 9 0 1 2 3 4 5 6]\n",
            "[0 1 2 3 4 5 6 7 8 9] [5 6 7 8 9 0 1 2 3 4]\n",
            "[0 1 2 3 4 5 6 7 8 9] [5 6 7 8 9 0 1 2 3 4]\n",
            "[0 1 2 3 4 5 6 7 8 9] [6 7 8 9 0 1 2 3 4 5]\n",
            "[0 1 2 3 4 5 6 7 8 9] [3 4 5 6 7 8 9 0 1 2]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import secrets\n",
        "a = np.arange(10)\n",
        "for idx in range(10):\n",
        "    a_ = np.roll(a, secrets.randbelow(10))\n",
        "    print(a, a_)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/plain": [
              "7"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        " secrets.randbelow(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[ 1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35]\n",
            "[11, 9, 5, 19, 29, 3, 35, 13, 33, 21, 25, 15, 17, 7, 23, 27, 31, 1]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "import random\n",
        "trialIdx = np.arange(36)\n",
        "c1 = trialIdx[1::2]  \n",
        "print(c1)\n",
        "c2 = random.sample(list(c1), len(c1))\n",
        "print(c2)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "oYM2uHdeg2RH"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from tqdm.auto import tqdm\n",
        "import scipy.io as sio\n",
        "from numpy import inf\n",
        "import secrets\n",
        "\n",
        "\n",
        "def tfr_spw_stats_whole_roll(paths, cond, svar, fband, n_perm):\n",
        "    \n",
        "\n",
        "    \"\"\"\n",
        "    Permutation based TFR statistical asessement based on whole null distribution\n",
        "\n",
        "    Function to compute the null distribution keeping the dimensions of the empirical\n",
        "    distribution. When testing using the whole null distribution, the permutations are\n",
        "    averaged and the dimensions of the empirical distributions are preserved. \n",
        "\n",
        "    .. todo::  \n",
        "        *  Implement onset shifting to account for whole triakl (in the current example we pool values from the 400-1000 ms time window).\n",
        "        *  Implement compatibilityu with Syncopy (for now it relies on ftPool_... .mat containing the TFRs computed in Fieldtrip).\n",
        "\n",
        "        \n",
        "    :param string input_path: path to the .npz file.\n",
        "    :param in condition: condition index (i.e. 0, 1, 2, 3).\n",
        "    :param int svar: spectral power or GPR (not implemented here).\n",
        "    :param int fband: frequency band index (i.e. low, high, higher).\n",
        "    :param int obs: [nullType, percentile], two integeres: 0 for min-max, 1 for whole, 0-100 percentile.\n",
        "    :param int correction: 1 for p-values, 2 for cluster corrected p-values.\n",
        "    :param int cluster_size: cluster size.\n",
        "    :param float alpha: alpha.    \n",
        "    \n",
        "    :return: empirical time frequency representation n_conds x n_sites x n_freqs x n_time (i.e. 30, 12, 16, 113).\n",
        "    :return: null time frequency representation (i.e. 30, 12, 16, 113  or 1000, 30, 12, 16, 2).\n",
        "    :rtype: float\n",
        " \n",
        "    @author: Nicolas Gravel, 19.09.2023 \n",
        "\n",
        "    \"\"\"\n",
        "\n",
        "    tps = [57,113,141,140]\n",
        "    fps = [19,16,11,1]\n",
        "    fbands  = ['low','high','higher']\n",
        "    blocks  = ['grat', 'nat']\n",
        "    svars   = ['spw', 'gpr']\n",
        "    methods = ['hanning', 'wavelet','wavelet']\n",
        "    svar = 0\n",
        "    # Conditions\n",
        "    if cond == 0:\n",
        "        block = 0\n",
        "        n_sess = 10\n",
        "    # =============================================================================\n",
        "    else:\n",
        "        block = 1\n",
        "        n_sess = 11\n",
        "\n",
        "\n",
        "    # =============================================================================\n",
        "    # How the indices are organized within the dataset\n",
        "    # =============================================================================\n",
        "    channels = [i for i in range(12*n_sess)] # Total channels\n",
        "    site_idx = np.zeros((12,n_sess)).astype(np.uint) # Index to sites\n",
        "    for n in range(12): # for time\n",
        "            site = [x for x in channels if x%12 == n]\n",
        "            site_idx[n,:] = site\n",
        "    print('site indices :')\n",
        "    print(site_idx)\n",
        "\n",
        "    if fband == 0:\n",
        "         bs_t0 = -700\n",
        "         bs_t1 = -100\n",
        "    elif fband == 1:\n",
        "         bs_t0 = -700\n",
        "         bs_t1 = -100\n",
        "    elif fband == 2:\n",
        "         bs_t0 = -700\n",
        "         bs_t1 = -100\n",
        "\n",
        "    # =============================================================================\n",
        "    # Empirical TFR\n",
        "    # =============================================================================\n",
        "    fname = str(paths[0]\n",
        "                + 'ftPool_'\n",
        "                + blocks[block] + '_'\n",
        "                + fbands[fband] + '_'\n",
        "                + methods[fband] + '.mat')\n",
        "    print(fname)\n",
        "    mat = sio.loadmat(fname)\n",
        "    dataPool = mat.get(str('dataLump_' + svars[svar]))\n",
        "\n",
        "\n",
        "\n",
        "    print(dataPool.shape)\n",
        "    time =  np.linspace(start = -800, stop = 2000, num = tps[fband])\n",
        "    b0 = np.searchsorted(time,bs_t0,side='left', sorter=None)\n",
        "    bf = np.searchsorted(time,bs_t1,side='left', sorter=None)\n",
        "\n",
        "    tfr_ = np.zeros((dataPool.shape[0],dataPool.shape[1],12,dataPool.shape[3],dataPool.shape[4]))\n",
        "\n",
        "    for i_cond in range(dataPool.shape[0]):\n",
        "        for i_rep in range(dataPool.shape[1]):\n",
        "            for i_depth in range(12):\n",
        "                for i_freq in range(dataPool.shape[3]):\n",
        "                    X = dataPool[i_cond,i_rep,site_idx[i_depth,:],i_freq,:]\n",
        "                    X = np.nanmean(X,axis=0) # average sessions\n",
        "                    baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,b0:bf]\n",
        "                    baseline = np.nanmean(baseline,axis=2) # average time\n",
        "                    X_bs = np.nanmean(baseline.flatten())\n",
        "                    tfr_[i_cond,i_rep,i_depth,i_freq,:] =  ((X-X_bs)/X_bs)*100\n",
        "\n",
        "    tfr_[tfr_ == -inf] = np.nan\n",
        "    tfr_[tfr_ == inf]  = np.nan\n",
        "    tfr_emp =  np.nanmean(tfr_,axis=1) # repetition average\n",
        "\n",
        "    # =============================================================================\n",
        "    # Null TFR\n",
        "    # =============================================================================\n",
        "    time =  np.linspace(start = -800, stop = 2000, num = tps[fband])\n",
        "    b0 = np.searchsorted(time,bs_t0,side='right', sorter=None)\n",
        "    bf = np.searchsorted(time,bs_t1,side='right', sorter=None)\n",
        "    t0 = np.searchsorted(time,400,side='left', sorter=None)\n",
        "    tf = np.searchsorted(time,1000,side='left', sorter=None)\n",
        "    X_h0   = np.zeros((n_perm,dataPool.shape[1],dataPool.shape[4]))\n",
        "    tfr_null = np.zeros((dataPool.shape[0],12,dataPool.shape[3],dataPool.shape[4]))\n",
        "\n",
        "    msg = (str(cond) + ' - ' + str(blocks[block]) + ' - ' + str(fbands[fband]))\n",
        "    choices = np.random.random(n_perm) > 0.5\n",
        "    for i_cond in tqdm(range(dataPool.shape[0]),desc=msg, position=0):\n",
        "        for i_depth in range(12):\n",
        "            for i_freq in range(dataPool.shape[3]):\n",
        "                for i_perm in range(n_perm):\n",
        "                    for i_rep in range(dataPool.shape[1]):\n",
        "                        if choices[i_perm] == True:\n",
        "                            X = dataPool[i_cond,i_rep,site_idx[i_depth,:],i_freq,:]\n",
        "                            X = np.nanmean(X,axis=0) # average sessions\n",
        "                            baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,:]\n",
        "                            baseline = np.roll(baseline, secrets.randbelow(dataPool.shape[4]))\n",
        "                            baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,b0:bf]\n",
        "                            baseline = np.nanmean(baseline,axis=3) # average time\n",
        "                            X_bs = np.nanmean(baseline.flatten())\n",
        "                            XX_bs = np.tile(X_bs,[1,dataPool.shape[4]])\n",
        "                            X_h0[i_perm,i_rep,:] = ((X-XX_bs)/XX_bs)*100\n",
        "                        elif choices[i_perm] == False:\n",
        "                            X = dataPool[i_cond,i_rep,site_idx[i_depth,:],i_freq,:]\n",
        "                            X = np.nanmean(X,axis=0) # average sessions\n",
        "                            baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,b0:bf]\n",
        "                            baseline = np.nanmean(baseline,axis=3) # average time\n",
        "                            X_bs = np.nanmean(baseline.flatten())\n",
        "                            XX_bs = np.tile(X_bs,[1,dataPool.shape[4]])\n",
        "                            X_h0[i_perm,i_rep,:] = ((X-XX_bs)/XX_bs)*100\n",
        "                X_h0[X_h0 == -inf] = np.nan\n",
        "                X_h0[X_h0 == inf]  = np.nan\n",
        "                tfr_null[i_cond,i_depth,i_freq,:] = np.nanmean(np.nanmean(X_h0,axis=0),axis=0)\n",
        "\n",
        "\n",
        "    print(tfr_emp.shape)\n",
        "    print(tfr_null.shape)\n",
        "\n",
        "    fname = str(paths[1] + 'uvtfr_stats_' +  fbands[fband]  + '_' + blocks[cond] + '_' + svars[svar] + '_' + str(n_perm) + '_roll.npz')\n",
        "    print(fname)\n",
        "    np.savez(fname, tfr_emp, tfr_null)\n",
        "\n",
        "    return tfr_emp, tfr_null\n",
        "\n",
        "\n",
        "\n",
        "def tfr_spw_stats_minmax_roll(paths, cond, svar, fband, n_perm):\n",
        "    \n",
        "\n",
        "    \"\"\"\n",
        "    Permutation based TFR statistical asessement based on min-max\n",
        "\n",
        "    Function to compute the truncated min-max distribution keeping the permutations \n",
        "    for each condition and recording site. It captures the variations at the extreme \n",
        "    of the null ditribution. In the min-max approach the minimum and maximum values \n",
        "    at each permutations are used. \n",
        "    \n",
        "    .. todo::  \n",
        "        *  Implement onset shifting to account for whole trial (in the current example we pool values from the 400-1000 ms time window).\n",
        "        *  Implement compatibilityu with Syncopy (for now it relies on ftPool_... .mat containing the TFRs computed in Fieldtrip).\n",
        "\n",
        "\n",
        "    :param string input_path: path to the .npz file.\n",
        "    :param in condition: condition index (i.e. 0, 1, 2, 3).\n",
        "    :param int svar: spectral power or GPR (not implemented here).\n",
        "    :param int fband: frequency band index (i.e. low, high, higher).\n",
        "    :param int obs: [nullType, percentile], two integeres: 0 for min-max, 1 for whole, 0-100 percentile.\n",
        "    :param int correction: 1 for p-values, 2 for cluster corrected p-values.\n",
        "    :param int cluster_size: cluster size.\n",
        "    :param float alpha: alpha.    \n",
        "    \n",
        "    :return: empirical time frequency representation n_conds x n_sites x n_freqs x n_time (i.e. 30, 12, 16, 113).\n",
        "    :return: null time frequency representation (i.e. 30, 12, 16, 113  or 1000, 30, 12, 16, 2).\n",
        "    :rtype: float\n",
        " \n",
        "    @author: Nicolas Gravel, 19.09.2023 \n",
        "    \"\"\"\n",
        "\n",
        "    tps = [57,113,141,140]\n",
        "    fps = [19,16,11,1]\n",
        "    fbands  = ['low','high','higher']\n",
        "    blocks  = ['grat', 'nat']\n",
        "    svars   = ['spw', 'gpr']\n",
        "    methods = ['hanning', 'wavelet','wavelet']\n",
        "    svar = 0\n",
        "    # Conditions\n",
        "    if cond == 0:\n",
        "        block = 0\n",
        "        n_sess = 10\n",
        "    # =============================================================================\n",
        "    else:\n",
        "        block = 1\n",
        "        n_sess = 11\n",
        "\n",
        "\n",
        "    # =============================================================================\n",
        "    # How the indices are organized within the dataset\n",
        "    # =============================================================================\n",
        "    channels = [i for i in range(12*n_sess)] # Total channels\n",
        "    site_idx = np.zeros((12,n_sess)).astype(np.uint) # Index to sites\n",
        "    for n in range(12): # for time\n",
        "            site = [x for x in channels if x%12 == n]\n",
        "            site_idx[n,:] = site\n",
        "    print('site indices :')\n",
        "    print(site_idx)\n",
        "\n",
        "    if fband == 0:\n",
        "         bs_t0 = -700\n",
        "         bs_t1 = -100\n",
        "    elif fband == 1:\n",
        "         bs_t0 = -700\n",
        "         bs_t1 = -100\n",
        "    elif fband == 2:\n",
        "         bs_t0 = -700\n",
        "         bs_t1 = -100\n",
        "\n",
        "    # =============================================================================\n",
        "    # Empirical TFR\n",
        "    # =============================================================================\n",
        "    fname = str(paths[0]\n",
        "                + 'ftPool_'\n",
        "                + blocks[block] + '_'\n",
        "                + fbands[fband] + '_'\n",
        "                + methods[fband] + '.mat')\n",
        "    print(fname)\n",
        "    mat = sio.loadmat(fname)\n",
        "    dataPool = mat.get(str('dataLump_' + svars[svar]))\n",
        "\n",
        "\n",
        "\n",
        "    print(dataPool.shape)\n",
        "    time =  np.linspace(start = -800, stop = 2000, num = tps[fband])\n",
        "    b0 = np.searchsorted(time,bs_t0,side='left', sorter=None)\n",
        "    bf = np.searchsorted(time,bs_t1,side='left', sorter=None)\n",
        "\n",
        "    tfr_ = np.zeros((dataPool.shape[0],dataPool.shape[1],12,dataPool.shape[3],dataPool.shape[4]))\n",
        "\n",
        "    for i_cond in range(dataPool.shape[0]):\n",
        "        for i_rep in range(dataPool.shape[1]):\n",
        "            for i_depth in range(12):\n",
        "                for i_freq in range(dataPool.shape[3]):\n",
        "                    X = dataPool[i_cond,i_rep,site_idx[i_depth,:],i_freq,:]\n",
        "                    X = np.nanmean(X,axis=0) # average sessions\n",
        "                    baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,b0:bf]\n",
        "                    baseline = np.nanmean(baseline,axis=2) # average time\n",
        "                    X_bs = np.nanmean(baseline.flatten())\n",
        "                    tfr_[i_cond,i_rep,i_depth,i_freq,:] =  ((X-X_bs)/X_bs)*100\n",
        "\n",
        "    tfr_[tfr_ == -inf] = np.nan\n",
        "    tfr_[tfr_ == inf]  = np.nan\n",
        "    tfr_emp =  np.nanmean(tfr_,axis=1) # repetition average\n",
        "\n",
        "    # =============================================================================\n",
        "    # Null TFR\n",
        "    # =============================================================================\n",
        "    time =  np.linspace(start = -800, stop = 2000, num = tps[fband])\n",
        "    b0  = np.searchsorted(time,bs_t0,side='right', sorter=None)\n",
        "    bf  = np.searchsorted(time,bs_t1,side='right', sorter=None)\n",
        "    t0  = np.searchsorted(time,-200,side='left', sorter=None)\n",
        "    tf  = np.searchsorted(time,1200,side='left', sorter=None)\n",
        "    win = time[t0:tf]\n",
        "    X_h0   = np.zeros((10,dataPool.shape[3],dataPool.shape[4]))\n",
        "    tfr_null = np.zeros((n_perm,dataPool.shape[0],12,2))\n",
        "\n",
        "    msg = (str(cond) + ' - ' + str(blocks[block]) + ' - ' + str(fbands[fband]))\n",
        "    choices = np.random.random(n_perm) > 0.5\n",
        "    for i_perm in tqdm(range(n_perm),desc=msg, position=0):\n",
        "        for i_cond in range(dataPool.shape[1]):\n",
        "            for i_depth in range(12):\n",
        "                for i_freq in range(dataPool.shape[3]):\n",
        "                    for i_rep in range(dataPool.shape[1]):\n",
        "                        if choices[i_perm] == True:\n",
        "                            X = dataPool[i_cond,i_rep,site_idx[i_depth,:],i_freq,:]\n",
        "                            X = np.nanmean(X,axis=0) # average sessions\n",
        "                            baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,:]\n",
        "                            baseline = np.roll(baseline, secrets.randbelow(dataPool.shape[4]))\n",
        "                            baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,b0:bf]\n",
        "                            baseline = np.nanmean(baseline,axis=3) # average time\n",
        "                            X_bs = np.nanmean(baseline.flatten())\n",
        "                            XX_bs = np.tile(X_bs,[1,dataPool.shape[4]])\n",
        "                            X_h0[i_rep,i_freq,:] = ((X-XX_bs)/XX_bs)*100\n",
        "                        elif choices[i_perm] == False:\n",
        "                            X = dataPool[i_cond,i_rep,site_idx[i_depth,:],i_freq,:]\n",
        "                            X = np.nanmean(X,axis=0) # average sessions\n",
        "                            baseline = dataPool[:,:,site_idx[i_depth,:],i_freq,b0:bf]\n",
        "                            baseline = np.nanmean(baseline,axis=3) # average time\n",
        "                            X_bs = np.nanmean(baseline.flatten())\n",
        "                            XX_bs = np.tile(X_bs,[1,dataPool.shape[4]])\n",
        "                            X_h0[i_rep,i_freq,:] = ((X-XX_bs)/XX_bs)*100\n",
        "                X_h0[X_h0 == -inf] = np.nan\n",
        "                X_h0[X_h0 == inf]  = np.nan\n",
        "                X = X_h0[:,:,t0:tf] # pool repetitions, frequency bins (all..) and time bins (400-1000ms))\n",
        "                # save permutation's min-max for each condition and depth\n",
        "                tfr_null[i_perm,i_cond,i_depth,0] = np.nanmin(X.flatten())\n",
        "                tfr_null[i_perm,i_cond,i_depth,1] = np.nanmax(X.flatten())\n",
        "\n",
        "\n",
        "    print(tfr_emp.shape)\n",
        "    print(tfr_null.shape)\n",
        "\n",
        "    fname = str(paths[1] + 'uvtfr_stats_' +  fbands[fband]  + '_' + blocks[cond] + '_' + svars[svar] + '_' + str(n_perm) + '_minmax_roll.npz')\n",
        "    print(fname)\n",
        "    np.savez(fname, tfr_emp, tfr_null)\n",
        "\n",
        "    return tfr_emp, tfr_null\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Set paths"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {},
      "outputs": [],
      "source": [
        "in_path   = '/Volumes/Gandalf/MWlamprop/data/'\n",
        "out_path  = '/Volumes/Gandalf/MWlamprop/results/stats/univariate/'\n",
        "paths = [in_path,out_path]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "site indices :\n",
            "[[  0  12  24  36  48  60  72  84  96 108]\n",
            " [  1  13  25  37  49  61  73  85  97 109]\n",
            " [  2  14  26  38  50  62  74  86  98 110]\n",
            " [  3  15  27  39  51  63  75  87  99 111]\n",
            " [  4  16  28  40  52  64  76  88 100 112]\n",
            " [  5  17  29  41  53  65  77  89 101 113]\n",
            " [  6  18  30  42  54  66  78  90 102 114]\n",
            " [  7  19  31  43  55  67  79  91 103 115]\n",
            " [  8  20  32  44  56  68  80  92 104 116]\n",
            " [  9  21  33  45  57  69  81  93 105 117]\n",
            " [ 10  22  34  46  58  70  82  94 106 118]\n",
            " [ 11  23  35  47  59  71  83  95 107 119]]\n",
            "/Volumes/Gandalf/MWlamprop/data/ftPool_grat_high_wavelet.mat\n",
            "(30, 10, 120, 16, 113)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/1636253498.py:104: RuntimeWarning: Mean of empty slice\n",
            "  X = np.nanmean(X,axis=0) # average sessions\n",
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/1636253498.py:106: RuntimeWarning: Mean of empty slice\n",
            "  baseline = np.nanmean(baseline,axis=2) # average time\n",
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/1636253498.py:112: RuntimeWarning: Mean of empty slice\n",
            "  tfr_emp =  np.nanmean(tfr_,axis=1) # repetition average\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "a600618c34cb422f86e222a08d2f0957",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "0 - grat - high:   0%|          | 0/30 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/1636253498.py:144: RuntimeWarning: Mean of empty slice\n",
            "  X = np.nanmean(X,axis=0) # average sessions\n",
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/1636253498.py:134: RuntimeWarning: Mean of empty slice\n",
            "  X = np.nanmean(X,axis=0) # average sessions\n",
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/1636253498.py:152: RuntimeWarning: Mean of empty slice\n",
            "  tfr_null[i_cond,i_depth,i_freq,:] = np.nanmean(np.nanmean(X_h0,axis=0),axis=0)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(30, 12, 16, 113)\n",
            "(30, 12, 16, 113)\n",
            "/Volumes/Gandalf/MWlamprop/results/stats/univariate/uvtfr_stats_high_grat_spw_30_roll.npz\n"
          ]
        }
      ],
      "source": [
        "n_perm = 30\n",
        "fband  = 1\n",
        "cond   = 0\n",
        "tfr_emp, tfr_null  = tfr_spw_stats_whole_roll(paths,cond,0,fband,n_perm)\n",
        "#tfr_emp, tfr_null = tfr_spw_stats_minmax(paths,cond,0,fband,n_perm)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "site indices :\n",
            "[[  0  12  24  36  48  60  72  84  96 108]\n",
            " [  1  13  25  37  49  61  73  85  97 109]\n",
            " [  2  14  26  38  50  62  74  86  98 110]\n",
            " [  3  15  27  39  51  63  75  87  99 111]\n",
            " [  4  16  28  40  52  64  76  88 100 112]\n",
            " [  5  17  29  41  53  65  77  89 101 113]\n",
            " [  6  18  30  42  54  66  78  90 102 114]\n",
            " [  7  19  31  43  55  67  79  91 103 115]\n",
            " [  8  20  32  44  56  68  80  92 104 116]\n",
            " [  9  21  33  45  57  69  81  93 105 117]\n",
            " [ 10  22  34  46  58  70  82  94 106 118]\n",
            " [ 11  23  35  47  59  71  83  95 107 119]]\n",
            "/Volumes/Gandalf/MWlamprop/data/ftPool_grat_high_wavelet.mat\n",
            "(30, 10, 120, 16, 113)\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/3094451537.py:262: RuntimeWarning: Mean of empty slice\n",
            "  X = np.nanmean(X,axis=0) # average sessions\n",
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/3094451537.py:264: RuntimeWarning: Mean of empty slice\n",
            "  baseline = np.nanmean(baseline,axis=2) # average time\n",
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/3094451537.py:270: RuntimeWarning: Mean of empty slice\n",
            "  tfr_emp =  np.nanmean(tfr_,axis=1) # repetition average\n"
          ]
        },
        {
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "0dd23fe8c8a149d38c6c292d2887bf66",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "0 - grat - high:   0%|          | 0/100 [00:00<?, ?it/s]"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/3094451537.py:303: RuntimeWarning: Mean of empty slice\n",
            "  X = np.nanmean(X,axis=0) # average sessions\n",
            "/var/folders/_n/cg8c3_pj1_778vx80m_y0nww0000gn/T/ipykernel_3932/3094451537.py:293: RuntimeWarning: Mean of empty slice\n",
            "  X = np.nanmean(X,axis=0) # average sessions\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(30, 12, 16, 113)\n",
            "(100, 30, 12, 2)\n",
            "/Volumes/Gandalf/MWlamprop/results/stats/univariate/uvtfr_stats_high_grat_spw_100_minmax_roll.npz\n"
          ]
        }
      ],
      "source": [
        "n_perm = 100\n",
        "fband  = 1\n",
        "cond   = 0\n",
        "#tfr_emp, tfr_null  = tfr_spw_stats_whole_roll(paths,cond,0,fband,n_perm)\n",
        "tfr_emp, tfr_null = tfr_spw_stats_minmax_roll(paths,cond,0,fband,n_perm)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [],
      "source": [
        "from tfrStats.plot_tfr_stats import plot_tfr_stats as plot_tfr_stats\n",
        "from tfrStats.plot_dtfr_stats import plot_dtfr_stats as plot_dtfr_stats\n",
        "\n",
        "in_path   = '/Volumes/Gandalf/MWlamprop/data/'\n",
        "out_path  = '/Volumes/Gandalf/MWlamprop/results/stats/univariate/'\n",
        "paths = [in_path,out_path]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "/Volumes/Gandalf/MWlamprop/results/stats/univariate/uvtfr_stats_high_grat_spw_30_roll.npz\n",
            "tfr emp  :  (30, 12, 16, 113)\n",
            "tfr null    (30, 12, 16, 113)\n",
            "whole-null-roll\n",
            "cutoff computed using whole null distribution:  108.30031964473675\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 600x400 with 4 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "null         = [2, 95]\n",
        "alpha        = 0.05\n",
        "correction   = 1\n",
        "cluster_size = 0\n",
        "fband        = 1\n",
        "cond         = 0\n",
        "type         = 'whole_roll'\n",
        "\n",
        "plot_tfr_stats(out_path, cond, fband, null, correction, cluster_size, type, alpha)  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "/Volumes/Gandalf/MWlamprop/results/stats/univariate/uvtfr_stats_high_grat_spw_100_minmax_roll.npz\n",
            "tfr emp  :  (30, 12, 16, 113)\n",
            "tfr null    (100, 30, 12, 2)\n"
          ]
        },
        {
          "ename": "IndexError",
          "evalue": "too many indices for array: array is 4-dimensional, but 5 were indexed",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[1;32m/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/tests.ipynb Cell 10\u001b[0m line \u001b[0;36m9\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/tests.ipynb#X23sZmlsZQ%3D%3D?line=5'>6</a>\u001b[0m cond         \u001b[39m=\u001b[39m \u001b[39m0\u001b[39m\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/tests.ipynb#X23sZmlsZQ%3D%3D?line=6'>7</a>\u001b[0m \u001b[39mtype\u001b[39m         \u001b[39m=\u001b[39m \u001b[39m'\u001b[39m\u001b[39mminmax_roll\u001b[39m\u001b[39m'\u001b[39m\n\u001b[0;32m----> <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrStats_local/docs/source/notebooks/tests.ipynb#X23sZmlsZQ%3D%3D?line=8'>9</a>\u001b[0m plot_tfr_stats(out_path, cond, fband, null, correction, cluster_size, \u001b[39mtype\u001b[39m, alpha)\n",
            "File \u001b[0;32m~/Documents/Websites/tfrStats/tfrStats_local/tfrStats/plot_tfr_stats.py:100\u001b[0m, in \u001b[0;36mplot_tfr_stats\u001b[0;34m(input_path, cond, fband, null, correction, cluster_size, type, alpha)\u001b[0m\n\u001b[1;32m     97\u001b[0m tfr_emp, tfr_null \u001b[39m=\u001b[39m load_uv_tfrs(input_path, [], cond, fband, results) \u001b[39m# load tfrs from .npz file\u001b[39;00m\n\u001b[1;32m     99\u001b[0m \u001b[39mif\u001b[39;00m correction \u001b[39m==\u001b[39m \u001b[39m1\u001b[39m:\n\u001b[0;32m--> 100\u001b[0m     stats \u001b[39m=\u001b[39m get_pvals_minmax(tfr_emp, tfr_null, tail \u001b[39m=\u001b[39;49m \u001b[39m'\u001b[39;49m\u001b[39msingle-sided\u001b[39;49m\u001b[39m'\u001b[39;49m)\n\u001b[1;32m    102\u001b[0m \u001b[39mif\u001b[39;00m correction \u001b[39m==\u001b[39m \u001b[39m2\u001b[39m:\n\u001b[1;32m    103\u001b[0m     stats \u001b[39m=\u001b[39m get_pvals_minmax(tfr_emp, tfr_null, tail \u001b[39m=\u001b[39m \u001b[39m'\u001b[39m\u001b[39msingle-sided\u001b[39m\u001b[39m'\u001b[39m)\n",
            "File \u001b[0;32m~/Documents/Websites/tfrStats/tfrStats_local/tfrStats/get_pvals_minmax.py:32\u001b[0m, in \u001b[0;36mget_pvals_minmax\u001b[0;34m(tfr_emp, tfr_null, tail)\u001b[0m\n\u001b[1;32m     30\u001b[0m     nullDist  \u001b[39m=\u001b[39m tfr_null[:,:,:,:,:]  \u001b[39m# use the both min and max\u001b[39;00m\n\u001b[1;32m     31\u001b[0m \u001b[39melif\u001b[39;00m tail \u001b[39m==\u001b[39m \u001b[39m'\u001b[39m\u001b[39msingle-sided\u001b[39m\u001b[39m'\u001b[39m:\n\u001b[0;32m---> 32\u001b[0m     nullDist   \u001b[39m=\u001b[39m tfr_null[:,:,:,:,\u001b[39m1\u001b[39;49m]  \u001b[39m# use the max\u001b[39;00m\n\u001b[1;32m     33\u001b[0m nullDist     \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mnanmean(nullDist,axis\u001b[39m=\u001b[39m\u001b[39m1\u001b[39m) \u001b[39m# average conditions\u001b[39;00m\n\u001b[1;32m     34\u001b[0m nullDist     \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mamax(nullDist,axis\u001b[39m=\u001b[39m\u001b[39m1\u001b[39m) \u001b[39m# max across sites\u001b[39;00m\n",
            "\u001b[0;31mIndexError\u001b[0m: too many indices for array: array is 4-dimensional, but 5 were indexed"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "null         = [3, 95]\n",
        "alpha        = 0.05\n",
        "correction   = 1\n",
        "cluster_size = 0\n",
        "fband        = 1\n",
        "cond         = 0\n",
        "type         = 'minmax_roll'\n",
        "\n",
        "plot_tfr_stats(out_path, cond, fband, null, correction, cluster_size, type, alpha)  "
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "szKEE41WIZlD",
        "cuKdKsiT-xLD",
        "OWH7Fjfy_K5Q",
        "FFpTHYv8BYEw",
        "ZhUt1I13Bbfv",
        "dcOdfYWeBhYn",
        "-lRqU1vNBkEp"
      ],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
