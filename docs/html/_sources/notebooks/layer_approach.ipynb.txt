{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j_Q6VK26-3j0"
      },
      "source": [
        "# <span style=\"color:#3498db\">**Plot decoding curves**</span>\n",
        "\n",
        "Here we plot average RDM (classification accuracy curves) for MUA, bipolar-LFP and TFRs (average of a frequency band).\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "30\n",
            "session:  0\n"
          ]
        },
        {
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/Volumes/Gandalf/MWlamprop/data/grat/spw_Dec_ch1_freq1_low_hanning_norm_c.npy'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32m/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb Cell 2\u001b[0m line \u001b[0;36m2\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W1sZmlsZQ%3D%3D?line=0'>1</a>\u001b[0m \u001b[39mfrom\u001b[39;00m \u001b[39mtfrMVPA\u001b[39;00m\u001b[39m.\u001b[39;00m\u001b[39mplot_tfr_rdm\u001b[39;00m \u001b[39mimport\u001b[39;00m plot_tfr_rdm \u001b[39mas\u001b[39;00m plot_tfr_rdm\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W1sZmlsZQ%3D%3D?line=2'>3</a>\u001b[0m conf \u001b[39m=\u001b[39m {\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W1sZmlsZQ%3D%3D?line=3'>4</a>\u001b[0m     \u001b[39m'\u001b[39m\u001b[39mpaths\u001b[39m\u001b[39m'\u001b[39m    : [\n\u001b[1;32m      <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W1sZmlsZQ%3D%3D?line=4'>5</a>\u001b[0m     \u001b[39m'\u001b[39m\u001b[39m/Users/nicogravel/Documents/Gandalf/MWlamprop/data/results_bckp/\u001b[39m\u001b[39m'\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W1sZmlsZQ%3D%3D?line=17'>18</a>\u001b[0m     \u001b[39m'\u001b[39m\u001b[39mnewData\u001b[39m\u001b[39m'\u001b[39m: \u001b[39mTrue\u001b[39;00m\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W1sZmlsZQ%3D%3D?line=18'>19</a>\u001b[0m     }\n\u001b[0;32m---> <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W1sZmlsZQ%3D%3D?line=20'>21</a>\u001b[0m plot_tfr_rdm(conf)\n",
            "File \u001b[0;32m~/Documents/Websites/tfrStats/tfrMVPA_local/tfrMVPA/plot_tfr_rdm.py:180\u001b[0m, in \u001b[0;36mplot_tfr_rdm\u001b[0;34m(conf)\u001b[0m\n\u001b[1;32m    155\u001b[0m \u001b[39mfor\u001b[39;00m fband \u001b[39min\u001b[39;00m \u001b[39mrange\u001b[39m(n_fband):\n\u001b[1;32m    156\u001b[0m     \u001b[39m# Genertal configuration\u001b[39;00m\n\u001b[1;32m    158\u001b[0m     conf \u001b[39m=\u001b[39m {\n\u001b[1;32m    159\u001b[0m         \u001b[39m'\u001b[39m\u001b[39mpaths\u001b[39m\u001b[39m'\u001b[39m    : [\n\u001b[1;32m    160\u001b[0m         \u001b[39m'\u001b[39m\u001b[39m/Users/nicogravel/Documents/Gandalf/MWlamprop/data/results_bckp/\u001b[39m\u001b[39m'\u001b[39m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    177\u001b[0m         \u001b[39m'\u001b[39m\u001b[39mrsa\u001b[39m\u001b[39m'\u001b[39m      : rsa\n\u001b[1;32m    178\u001b[0m         }\n\u001b[0;32m--> 180\u001b[0m     rdms  \u001b[39m=\u001b[39m load_tfr_rdm(conf)\n\u001b[1;32m    182\u001b[0m     rdm1 \u001b[39m=\u001b[39m rdms[\u001b[39m'\u001b[39m\u001b[39mrdm_split1\u001b[39m\u001b[39m'\u001b[39m]\n\u001b[1;32m    183\u001b[0m     rdm2 \u001b[39m=\u001b[39m rdms[\u001b[39m'\u001b[39m\u001b[39mrdm_split2\u001b[39m\u001b[39m'\u001b[39m]\n",
            "File \u001b[0;32m~/Documents/Websites/tfrStats/tfrMVPA_local/tfrMVPA/load_tfr_rdm.py:104\u001b[0m, in \u001b[0;36mload_tfr_rdm\u001b[0;34m(conf)\u001b[0m\n\u001b[1;32m    101\u001b[0m             rdm_split2[ch,fr,:,:,:] \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39msqueeze(Y_t[:,:,:]) \n\u001b[1;32m    103\u001b[0m         \u001b[39mif\u001b[39;00m lump \u001b[39m==\u001b[39m \u001b[39mTrue\u001b[39;00m:\n\u001b[0;32m--> 104\u001b[0m             Z_t \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39;49mload(os\u001b[39m.\u001b[39;49mpath\u001b[39m.\u001b[39;49mjoin(results_path \u001b[39m+\u001b[39;49m decvars[dvar] \n\u001b[1;32m    105\u001b[0m                                     \u001b[39m+\u001b[39;49m \u001b[39m'\u001b[39;49m\u001b[39m_Dec_ch\u001b[39;49m\u001b[39m'\u001b[39;49m \u001b[39m+\u001b[39;49m \u001b[39mstr\u001b[39;49m(ch\u001b[39m+\u001b[39;49m\u001b[39m1\u001b[39;49m) \n\u001b[1;32m    106\u001b[0m                                     \u001b[39m+\u001b[39;49m \u001b[39m'\u001b[39;49m\u001b[39m_freq\u001b[39;49m\u001b[39m'\u001b[39;49m \u001b[39m+\u001b[39;49m \u001b[39mstr\u001b[39;49m(fr\u001b[39m+\u001b[39;49m\u001b[39m1\u001b[39;49m) \n\u001b[1;32m    107\u001b[0m                                     \u001b[39m+\u001b[39;49m \u001b[39m'\u001b[39;49m\u001b[39m_\u001b[39;49m\u001b[39m'\u001b[39;49m \u001b[39m+\u001b[39;49m fbands[fband] \n\u001b[1;32m    108\u001b[0m                                     \u001b[39m+\u001b[39;49m \u001b[39m'\u001b[39;49m\u001b[39m_\u001b[39;49m\u001b[39m'\u001b[39;49m \u001b[39m+\u001b[39;49m methods[fband] \u001b[39m+\u001b[39;49m \u001b[39m'\u001b[39;49m\u001b[39m_norm_c.npy\u001b[39;49m\u001b[39m'\u001b[39;49m))\n\u001b[1;32m    110\u001b[0m             rdm_whole[ch,fr,:,:,:] \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39msqueeze(Z_t[:,:,:]) \n\u001b[1;32m    114\u001b[0m \u001b[39mif\u001b[39;00m rsa \u001b[39m==\u001b[39m \u001b[39mTrue\u001b[39;00m:    \n",
            "File \u001b[0;32m~/opt/anaconda3/envs/lamidec/lib/python3.8/site-packages/numpy/lib/npyio.py:417\u001b[0m, in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    415\u001b[0m     own_fid \u001b[39m=\u001b[39m \u001b[39mFalse\u001b[39;00m\n\u001b[1;32m    416\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[0;32m--> 417\u001b[0m     fid \u001b[39m=\u001b[39m stack\u001b[39m.\u001b[39menter_context(\u001b[39mopen\u001b[39;49m(os_fspath(file), \u001b[39m\"\u001b[39;49m\u001b[39mrb\u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[1;32m    418\u001b[0m     own_fid \u001b[39m=\u001b[39m \u001b[39mTrue\u001b[39;00m\n\u001b[1;32m    420\u001b[0m \u001b[39m# Code to distinguish from NumPy binary files and pickles.\u001b[39;00m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/Volumes/Gandalf/MWlamprop/data/grat/spw_Dec_ch1_freq1_low_hanning_norm_c.npy'"
          ]
        }
      ],
      "source": [
        "from tfrMVPA.plot_tfr_rdm import plot_tfr_rdm as plot_tfr_rdm\n",
        "\n",
        "conf = {\n",
        "    'paths'    : [\n",
        "    '/Users/nicogravel/Documents/Gandalf/MWlamprop/data/results_bckp/',\n",
        "    # '/mnt/hpc_slurm/projects/MWlamprop/Analysis/02_data/spectral_dec/'\n",
        "    #'/mnt/hpc/projects/MWlamprop/Analysis/02_data/preprocessed/',\n",
        "    #'/mnt/pns/home/graveln/Documents/MWlamprop/results/spectral_dec/',\n",
        "    #'/mnt/hpc/projects/MWlamprop/Analysis/02_data/spectral_dec/',\n",
        "    '/Volumes/Gandalf/MWlamprop/data/',\n",
        "    '/Volumes/Gandalf/MWlamprop/results/'\n",
        "    ],\n",
        "    'block'  : 'grat', # 'both', 'objects', 'scenes' \n",
        "    'subset' : False,\n",
        "    'prctl'  :99,\n",
        "    'lump'   : True,\n",
        "    'rsa'    : False,\n",
        "    'newData': True\n",
        "    }\n",
        "\n",
        "plot_tfr_rdm(conf)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# MUA"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {},
      "outputs": [
        {
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/Users/nicogravel/Documents/Gandalf/MWlamprop/data/results_bckp/grat/unsDec_ch1_mua_resampled.npy'",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[1;32m/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb Cell 5\u001b[0m line \u001b[0;36m7\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W5sZmlsZQ%3D%3D?line=67'>68</a>\u001b[0m n_tbin \u001b[39m=\u001b[39m \u001b[39m2800\u001b[39m\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W5sZmlsZQ%3D%3D?line=68'>69</a>\u001b[0m fname \u001b[39m=\u001b[39m \u001b[39m'\u001b[39m\u001b[39m/unsDec_ch\u001b[39m\u001b[39m'\u001b[39m \u001b[39m+\u001b[39m \u001b[39mstr\u001b[39m(i_site\u001b[39m+\u001b[39m\u001b[39m1\u001b[39m) \u001b[39m+\u001b[39m \u001b[39m'\u001b[39m\u001b[39m_mua_resampled.npy\u001b[39m\u001b[39m'\u001b[39m\n\u001b[0;32m---> <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W5sZmlsZQ%3D%3D?line=69'>70</a>\u001b[0m X \u001b[39m=\u001b[39m np\u001b[39m.\u001b[39mload(os\u001b[39m.\u001b[39mpath\u001b[39m.\u001b[39mjoin(mua_path \u001b[39m+\u001b[39m conds[cond] \u001b[39m+\u001b[39m fname))\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W5sZmlsZQ%3D%3D?line=70'>71</a>\u001b[0m rdm_ts[\u001b[39m0\u001b[39m,i_site,:,:,:] \u001b[39m=\u001b[39m X\n\u001b[1;32m     <a href='vscode-notebook-cell:/Users/nicogravel/Documents/Websites/tfrStats/tfrMVPA_local/docs/source/notebooks/layer_approach.ipynb#W5sZmlsZQ%3D%3D?line=71'>72</a>\u001b[0m \u001b[39mfor\u001b[39;00m i_tbin \u001b[39min\u001b[39;00m \u001b[39mrange\u001b[39m(n_tbin):\n",
            "File \u001b[0;32m~/opt/anaconda3/envs/lamidec/lib/python3.8/site-packages/numpy/lib/npyio.py:417\u001b[0m, in \u001b[0;36mload\u001b[0;34m(file, mmap_mode, allow_pickle, fix_imports, encoding)\u001b[0m\n\u001b[1;32m    415\u001b[0m     own_fid \u001b[39m=\u001b[39m \u001b[39mFalse\u001b[39;00m\n\u001b[1;32m    416\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[0;32m--> 417\u001b[0m     fid \u001b[39m=\u001b[39m stack\u001b[39m.\u001b[39menter_context(\u001b[39mopen\u001b[39;49m(os_fspath(file), \u001b[39m\"\u001b[39;49m\u001b[39mrb\u001b[39;49m\u001b[39m\"\u001b[39;49m))\n\u001b[1;32m    418\u001b[0m     own_fid \u001b[39m=\u001b[39m \u001b[39mTrue\u001b[39;00m\n\u001b[1;32m    420\u001b[0m \u001b[39m# Code to distinguish from NumPy binary files and pickles.\u001b[39;00m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/Users/nicogravel/Documents/Gandalf/MWlamprop/data/results_bckp/grat/unsDec_ch1_mua_resampled.npy'"
          ]
        }
      ],
      "source": [
        "import os\n",
        "from scipy import stats\n",
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "import matplotlib.pyplot as plt\n",
        "from scipy.interpolate import interp2d\n",
        "import matplotlib.colors as colors\n",
        "\n",
        "conf = {\n",
        "    'paths'    : [\n",
        "    '/Users/nicogravel/Documents/Gandalf/MWlamprop/data/results_bckp/',\n",
        "    '/Volumes/Gandalf/MWlamprop/data/',\n",
        "    '/Volumes/Gandalf/MWlamprop/results/'\n",
        "    ],\n",
        "    'block'  : 'grat', # 'both', 'objects', 'scenes' \n",
        "    'subset' : False,\n",
        "    'prctl'  : 99,\n",
        "    'lump'   : True,\n",
        "    'rsa'    : False,\n",
        "    'newData': True\n",
        "    }\n",
        "\n",
        "paths = conf['paths']\n",
        "rsa   = conf['rsa']\n",
        "conds   = ['grat', 'nat']\n",
        "\n",
        "mua_path = paths[0]\n",
        "\n",
        "trange = [-500,1500]\n",
        "n_tpoints_whole = 2800\n",
        "t0 = 400\n",
        "tf = 1000\n",
        "n_site = 12\n",
        "if rsa == True:\n",
        "    n_tbin = 560\n",
        "else:\n",
        "    n_tbin = n_tpoints_whole\n",
        "\n",
        "cond = 0\n",
        "trialIdx_ = np.arange(0,30)\n",
        "trialIdx = trialIdx_\n",
        "M = np.zeros((trialIdx.shape[0],trialIdx.shape[0]))\n",
        "idx = np.tril_indices(M.shape[0], -1)\n",
        "time = np.linspace(-800,2000, n_tbin)\n",
        "pt_t0 = np.searchsorted(time,t0,side='left', sorter=None)\n",
        "pt_tf = np.searchsorted(time,tf,side='left', sorter=None) \n",
        "\n",
        "rho_tps = np.zeros((5,n_site, n_tbin)) \n",
        "rdm_ts = np.zeros((2,n_site,trialIdx_.shape[0],trialIdx_.shape[0], n_tbin)) \n",
        "\n",
        "\n",
        "for i_site in range(n_site): \n",
        "\n",
        "    # MUA\n",
        "    if rsa == True:\n",
        "        fname = '/unsDec_ch' + str(i_site+1) + '_mua_resampled_split1.npy'\n",
        "        X1 = np.load(os.path.join(mua_path + conds[cond] + fname))\n",
        "        fname = '/unsDec_ch' + str(i_site+1) + '_mua_resampled_split2.npy'\n",
        "        X2 = np.load(os.path.join(mua_path + conds[cond] + fname))\n",
        "        for i_tbin in range(n_tbin):\n",
        "            x1 = X1[:,:,i_tbin]\n",
        "            x2 = X2[:,:,i_tbin]\n",
        "            x1 = x1[np.ix_(trialIdx,trialIdx)]\n",
        "            x2 = x2[np.ix_(trialIdx,trialIdx)]\n",
        "            rho_tps[4,i_site,i_tbin] = stats.spearmanr(x1[idx],x2[idx])[0] \n",
        "            #rho_tps[3,i_site,i_tbin] = stats.spearmanr(x1.flatten(),x2.flatten())[0] \n",
        "    else:\n",
        "        n_tbin = 2800\n",
        "        fname = '/unsDec_ch' + str(i_site+1) + '_mua_resampled.npy'\n",
        "        X = np.load(os.path.join(mua_path + conds[cond] + fname))\n",
        "        rdm_ts[0,i_site,:,:,:] = X\n",
        "        for i_tbin in range(n_tbin):\n",
        "            x = X[:,:,i_tbin]\n",
        "            x = x[np.ix_(trialIdx,trialIdx)]\n",
        "            rho_tps[4,i_site,i_tbin] = np.mean(x[idx])\n",
        "    # LFP\n",
        "    if rsa == True:\n",
        "        fname = '/unsDec_ch' + str(i_site+1) + '_lfp_bipolar_split1.npy'\n",
        "        X1 = np.load(os.path.join(mua_path + conds[cond] + fname))\n",
        "        fname = '/unsDec_ch' + str(i_site+1) + '_lfp_bipolar_split2.npy'\n",
        "        X2 = np.load(os.path.join(mua_path + conds[cond] + fname))\n",
        "        for i_tbin in range(n_tbin):\n",
        "            x1 = X1[:,:,i_tbin]\n",
        "            x2 = X2[:,:,i_tbin]\n",
        "            x1 = x1[np.ix_(trialIdx,trialIdx)]\n",
        "            x2 = x2[np.ix_(trialIdx,trialIdx)]\n",
        "            rho_tps[3,i_site,i_tbin] = stats.spearmanr(x1[idx],x2[idx])[0] \n",
        "            #rho_tps[3,i_site,i_tbin] = stats.spearmanr(x1.flatten(),x2.flatten())[0] \n",
        "    else:\n",
        "        n_tbin = 560\n",
        "        fname = '/unsDec_layer' + str(i_site+1) + '_lfp_bipolar.npy'\n",
        "        X = np.load(os.path.join(mua_path + conds[cond] + fname))\n",
        "        #rdm_ts[1,i_site,:,:,:] = X\n",
        "        for i_tbin in range(n_tbin):\n",
        "            x = X[:,:,i_tbin]\n",
        "            x = x[np.ix_(trialIdx,trialIdx)]\n",
        "            rho_tps[3,i_site,i_tbin] = np.mean(x[idx])\n",
        "\n",
        "\n",
        "\n",
        "###  Plot\n",
        "twindow       = [65, 80] # window in the plot\n",
        "cmap          = 'cubehelix_r'\n",
        "coloff        = 0.5        # colormap center offset\n",
        "cnorm_range   = [100, 300]\n",
        "## helper function used by plot_stats to noramlize colormap ranges\n",
        "def coloroffset(min_val, max_val, k):\n",
        "\n",
        "    if 0 <= k <= 1:  # Ensure k is between 0 and 1\n",
        "        point = min_val + k*(max_val - min_val)\n",
        "        #print(f'For k={k}, the point in the range {min_val}-{max_val} is: {point}')\n",
        "    #else:\n",
        "        #print(\"Error: k must be between 0 and 1\")\n",
        "\n",
        "    return point\n",
        "fig, ax = plt.subplots(nrows=2, ncols=1,figsize=(6,4))\n",
        "ups           = 8 # upsampling in figure\n",
        "x =  np.linspace(start = -800, stop = 2000, num = rho_tps.shape[2])\n",
        "y = np.linspace(start=-550, stop=550, num=12).astype(int)\n",
        "x2 =  np.linspace(start = -800, stop = 2000, num = rho_tps.shape[2])\n",
        "y2 = np.linspace(start=-550, stop=550, num=12*ups).astype(int)\n",
        "X, Y = np.meshgrid(x, y)\n",
        "X2, Y2 = np.meshgrid(x2, y2)\n",
        "#print(davg.shape)\n",
        "davg = np.squeeze(rho_tps[3,:,:])\n",
        "f = interp2d(x, y, np.flipud(davg), kind='linear')\n",
        "# Color map normalization\n",
        "tt0 = np.searchsorted(x,cnorm_range[0],side='left', sorter=None)\n",
        "ttf = np.searchsorted(x,cnorm_range[1],side='left', sorter=None)\n",
        "tfrange = davg[:,tt0:ttf] \n",
        "_min = np.min(np.min(tfrange.flatten()))\n",
        "_max = np.max(np.max(tfrange.flatten()))\n",
        "#print('min =',_min,'max =',_max)   \n",
        "#vmin = 0 #_min  \n",
        "#vmax = _max\n",
        "#vcenter = coloroffset(vmin, vmax, coloff)\n",
        "#norm = colors.TwoSlopeNorm(vmin=vmin, vcenter=vcenter, vmax=vmax)  \n",
        "TFR_emp = f(x2, y2)\n",
        "#im_spwr = ax[0].pcolormesh(X2[:,twindow[0]:-twindow[1]], Y2[:,twindow[0]:-twindow[1]], TFR_emp[:,twindow[0]:-twindow[1]] , cmap=cmap,norm=norm)\n",
        "im_spwr = ax[0].pcolormesh(X2[:,twindow[0]:-twindow[1]], Y2[:,twindow[0]:-twindow[1]], TFR_emp[:,twindow[0]:-twindow[1]] , cmap=cmap)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "time series : (5, 12, 560)\n"
          ]
        }
      ],
      "source": [
        "print('time series :', rho_tps.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "szKEE41WIZlD",
        "cuKdKsiT-xLD",
        "OWH7Fjfy_K5Q",
        "FFpTHYv8BYEw",
        "ZhUt1I13Bbfv",
        "dcOdfYWeBhYn",
        "-lRqU1vNBkEp"
      ],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
